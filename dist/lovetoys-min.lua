function class(a,b)local c={}if b then for d,e in pairs(b)do c[d]=e end end;c.__name=a;c.__super=b;c=setmetatable(c,{__call=function(f,...)local g={}for d,e in pairs(c)do g[d]=e end;superInit(g)if g.__init then g:__init(...)end;return g end})return c end;function superInit(h,b)if b then if getSuper(b)then superInit(h,getSuper(b))end;if b.__init then b.__init(h)end elseif getSuper(h)then superInit(h,getSuper(h))end end;function getSuper(h)if h.__super then return h.__super end end;function getName(h)return h.__name end;Component={}Component.all={}function Component.create(a,i,j)local k=class(a)if i then j=j or{}k.__init=function(l,...)local m={...}for n,o in ipairs(i)do l[o]=m[n]or j[o]end end end;Component.register(k)return k end;function Component.register(p)Component.all[p.__name]=p end;function Component.load(q)local r={}setmetatable(r,{__index=_G})setfenv(2,r)for s,a in pairs(q)do r[a]=Component.all[a]end end;Entity=class("Entity")function Entity:__init(t,a)l.components={}l.eventManager=nil;l.alive=false;if t then l:setParent(t)else t=nil end;l.name=a;l.children={}end;function Entity:add(k)if l.components[k.__name]then if lovetoyDebug then print("Trying to add Component '"..k.__name.."', but it's already existing. Please use Entity:set to overwrite a component in an entity.")end else l.components[k.__name]=k;if l.eventManager then l.eventManager:fireEvent(ComponentAdded(l,k.__name))end end end;function Entity:set(k)if l.components[k.__name]==nil then l:add(k)else l.components[k.__name]=k end end;function Entity:addMultiple(u)for s,k in pairs(u)do l:add(k)end end;function Entity:remove(a)if l.components[a]then l.components[a]=nil else if lovetoyDebug then print("Trying to remove unexisting component "..a.." from Entity. Please fix this")end end;if l.eventManager then l.eventManager:fireEvent(ComponentRemoved(l,a))end end;function Entity:setParent(t)if l.parent then l.parent.children[l.id]=nil end;l.parent=t;l:registerAsChild()end;function Entity:getParent(t)return l.parent end;function Entity:registerAsChild()if l.id then l.parent.children[l.id]=l end end;function Entity:get(a)return l.components[a]end;function Entity:has(a)return not not l.components[a]end;function Entity:getComponents()return l.components end;function table.firstElement(v)for n,w in pairs(v)do return w end end;System=class("System")function System:__init()l.targets={}l.active=true end;function System:requires()return{}end;function System:addEntity(x,y)if y then l.targets[y][x.id]=x else l.targets[x.id]=x end end;function System:removeEntity(x,k)if table.firstElement(l.targets)then if table.firstElement(l.targets).__name then l.targets[x.id]=nil else for n,s in pairs(l.targets)do if k then for s,z in pairs(l:requires()[n])do if z==k then l.targets[n][x.id]=nil;break end end else l.targets[n][x.id]=nil end end end end end;function System:pickRequiredComponents(x)local A={}for B,C in pairs(l:requires())do table.insert(A,x:get(C))end;return unpack(A)end;EventManager=class("EventManager")function EventManager:__init()l.eventListeners={}end;function EventManager:addListener(D,E,F)if not l.eventListeners[D]then l.eventListeners[D]={}end;if not F then for G,H in pairs(l.eventListeners[D])do if H[1].__name==E[1].__name then if lovetoyDebug then print("EventListener already existing. Aborting")end;return end end;table.insert(l.eventListeners[D],E)else for G,H in pairs(l.eventListeners[D])do if H[1].__name==E.__name then if lovetoyDebug then print("EventListener already existing. Aborting")end;return end end;if type(F)=='function'then table.insert(l.eventListeners[D],{E,F})else if lovetoyDebug then print('Eventmanager: Second parameter has to be a function! Pls check '..E.__name)end end end end;function EventManager:removeListener(D,E)if l.eventListeners[D]then for G,H in pairs(l.eventListeners[D])do if H[1].__name==E then table.remove(l.eventListeners[D],G)return end end;if lovetoyDebug then print("Listener to be deleted is not existing.")end end end;function EventManager:fireEvent(I)if l.eventListeners[I.__name]then for s,E in pairs(l.eventListeners[I.__name])do E[2](E[1],I)end end end;ComponentAdded=class("ComponentAdded")function ComponentAdded:__init(x,k)l.entity=x;l.component=k end;ComponentRemoved=class("ComponentRemoved")function ComponentRemoved:__init(x,k)l.entity=x;l.component=k end;function table.firstElement(v)for n,w in pairs(v)do return w end end;Engine=class("Engine")function Engine:__init()l.entities={}l.rootEntity=Entity()l.singleRequirements={}l.allRequirements={}l.entityLists={}l.eventManager=EventManager()l.initializer={}l.systems={}l.systemRegistry={}l.systems["all"]={}l.systems["update"]={}l.systems["draw"]={}l.eventManager:addListener("ComponentRemoved",l,l.componentRemoved)l.eventManager:addListener("ComponentAdded",l,l.componentAdded)end;function Engine:addEntity(x)x.eventManager=l.eventManager;local J=#l.entities+1;x.id=J;l.entities[x.id]=x;if x.parent==nil then x:setParent(l.rootEntity)end;x:registerAsChild()for k,K in pairs(l.initializer)do if x:has(k)then K(x)end end;for n,k in pairs(x.components)do if not l.entityLists[k.__name]then l.entityLists[k.__name]={}end;l.entityLists[k.__name][x.id]=x;if l.singleRequirements[k.__name]then for L,M in pairs(l.singleRequirements[k.__name])do l:checkRequirements(x,M)end end end end;function Engine:removeEntity(x,N,O)for s,k in pairs(x.components)do if l.singleRequirements[k.__name]then for s,M in pairs(l.singleRequirements[k.__name])do M:removeEntity(x)end end end;for n,k in pairs(x.components)do l.entityLists[k.__name][x.id]=nil end;if l.entities[x.id]then if N then for s,P in pairs(x.children)do l:removeEntity(P,true)end else for s,P in pairs(x.children)do if O then P:setParent(O)else P:setParent(l.rootEntity)end;x:registerAsChild()end end;for n,P in pairs(x.parent.children)do x.parent.children[x.id]=nil end;l.entities[x.id].alive=false;l.entities[x.id]=nil else if lovetoyDebug then print("Trying to remove non existent entity from engine.")print("Entity id: "..x.id)print("Entity's components:")for n,k in pairs(x.components)do print(n)end end end end;function Engine:addSystem(M,Q)if M.draw and M.update and not Q then if lovetoyDebug then print("Lovetoys: Trying to add "..M.__name..", which has an update and a draw function, without specifying typ. Aborting")end;return end;if not l.systemRegistry[M.__name]then l:registerSystem(M)elseif not(M.update and M.draw)then if l.systemRegistry[M.__name]then if lovetoyDebug then print("Lovetoys: "..M.__name.." already exists. Aborting")end;return end end;if M.draw and not Q or Q=="draw"then for s,R in pairs(l.systems["draw"])do if R.__name==M.__name then if lovetoyDebug then print("Lovetoys: "..M.__name.." already exists. Aborting")end;return end end;table.insert(l.systems["draw"],M)elseif M.update and not Q or Q=="update"then for s,R in pairs(l.systems["update"])do if R.__name==M.__name then if lovetoyDebug then print("Lovetoys: "..M.__name.." already exists. Aborting")end;return end end;table.insert(l.systems["update"],M)end;for n,x in pairs(l.entities)do l:checkRequirements(x,M)end;return M end;function Engine:registerSystem(M)l.systemRegistry[M.__name]=M;table.insert(l.systems["all"],M)if M:requires()[1]and type(M:requires()[1])=="string"then for n,z in pairs(M:requires())do if n==1 then l.singleRequirements[z]=l.singleRequirements[z]or{}table.insert(l.singleRequirements[z],M)end;l.allRequirements[z]=l.allRequirements[z]or{}table.insert(l.allRequirements[z],M)end end;if table.firstElement(M:requires())and type(table.firstElement(M:requires()))=="table"then for n,u in pairs(M:requires())do local k=u[1]l.singleRequirements[k]=l.singleRequirements[k]or{}table.insert(l.singleRequirements[k],M)for s,z in pairs(u)do l.allRequirements[z]=l.allRequirements[z]or{}local S=false;for s,R in pairs(l.allRequirements[z])do if R==M then S=true;break end end;if not S then table.insert(l.allRequirements[z],M)end end;M.targets[n]={}end end end;function Engine:stopSystem(a)for n,M in pairs(l.systems["all"])do if a==M.__name then M.active=false end end end;function Engine:startSystem(a)for n,M in pairs(l.systems["all"])do if a==M.__name then M.active=true end end end;function Engine:toggleSystem(a)for n,M in pairs(l.systems["all"])do if a==M.__name then M.active=not M.active end end end;function Engine:update(T)for n,M in ipairs(l.systems["update"])do if M.active then M:update(T)end end end;function Engine:addInitializer(a,K)l.initializer[a]=K end;function Engine:removeInitializer(a)l.initializer[a]=nil end;function Engine:draw()for n,M in ipairs(l.systems["draw"])do if M.active then M:draw()end end end;function Engine:componentRemoved(I)local x=I.entity;local k=I.component;l.entityLists[k][x.id]=nil;if l.allRequirements[k]then for n,M in pairs(l.allRequirements[k])do M:removeEntity(x,k)end end end;function Engine:componentAdded(I)local x=I.entity;local k=I.component;if not l.entityLists[k]then l.entityLists[k]={}end;l.entityLists[k][x.id]=x;if l.allRequirements[k]then for n,M in pairs(l.allRequirements[k])do l:checkRequirements(x,M)end end;if l.initializer[I.component]then l.initializer[I.component](I.entity)end end;function Engine:getRootEntity()if l.rootEntity~=nil then return l.rootEntity end end;function Engine:getEntitiesWithComponent(k)if not l.entityLists[k]then l.entityLists[k]={}end;return l.entityLists[k]end;function Engine:checkRequirements(x,M)local U=true;local y=nil;for n,z in pairs(M:requires())do if type(z)=="string"then if not x.components[z]then U=false;break end elseif type(z)=="table"then U=true;for L,V in pairs(z)do if not x.components[V]then U=false;break end end;if U==true then y=n;M:addEntity(x,y)end end end;if U==true and y==nil then M:addEntity(x)end end;function Engine:requireComponents(W)local X,Y={},io.popen;for Z in Y('find '..W..' -name "*.lua"'):lines()do table.insert(X,Z)end;local _;for n,Z in ipairs(X)do if string.math(Z,"Components/")then require(Z)end end end
