function class(a,b)local c={}if b then for d,e in pairs(b)do c[d]=e end end;c.__name=a;c.__super=b;c=setmetatable(c,{__call=function(f,...)local g={}for d,e in pairs(c)do g[d]=e end;superInit(g)if g.__init then g:__init(...)end;return g end})return c end;function superInit(h,b)if b then if getSuper(b)then superInit(h,getSuper(b))end;if b.__init then b.__init(h)end elseif getSuper(h)then superInit(h,getSuper(h))end end;function getSuper(h)if h.__super then return h.__super end end;function getName(h)return h.__name end;Component=class("Component")function Component:__init()end;Entity=class("Entity")function Entity:__init(i,a)j.components={}j.eventManager=nil;j.alive=false;if i then j:setParent(i)else i=nil end;j.name=a;j.children={}end;function Entity:add(k)if j.components[k.__name]then if lovetoyDebug then print("Trying to add Component '"..k.__name.."', but it's already existing. Please use Entity:set to overwrite a component in an entity.")end else j.components[k.__name]=k;if j.eventManager then j.eventManager:fireEvent(ComponentAdded(j,k.__name))end end end;function Entity:set(k)if j.components[k.__name]==nil then j:add(k)else j.components[k.__name]=k end end;function Entity:addMultiple(l)for m,k in pairs(l)do j:add(k)end end;function Entity:remove(a)if j.components[a]then j.components[a]=nil else if lovetoyDebug then print("Trying to remove unexisting component "..a.." from Entity. Please fix this")end end;if j.eventManager then j.eventManager:fireEvent(ComponentRemoved(j,a))end end;function Entity:setParent(i)if j.parent then j.parent.children[j.id]=nil end;j.parent=i;j:registerAsChild()end;function Entity:getParent(i)return j.parent end;function Entity:registerAsChild()if j.id then j.parent.children[j.id]=j end end;function Entity:get(a)return j.components[a]end;function Entity:has(a)return not not j.components[a]end;function Entity:getComponents()return j.components end;function table.firstElement(n)for o,p in pairs(n)do return p end end;System=class("System")function System:__init()j.targets={}j.active=true end;function System:requires()return{}end;function System:addEntity(q,r)if r then j.targets[r][q.id]=q else j.targets[q.id]=q end end;function System:removeEntity(q,k)if table.firstElement(j.targets)then if table.firstElement(j.targets).__name then j.targets[q.id]=nil else for o,m in pairs(j.targets)do if k then for m,s in pairs(j:requires()[o])do if s==k then j.targets[o][q.id]=nil;break end end else j.targets[o][q.id]=nil end end end end end;function System:pickRequiredComponents(q)local t={}for u,v in pairs(j:requires())do table.insert(t,q:get(v))end;return unpack(t)end;EventManager=class("EventManager")function EventManager:__init()j.eventListeners={}end;function EventManager:addListener(w,x,y)if not j.eventListeners[w]then j.eventListeners[w]={}end;if not y then for z,A in pairs(j.eventListeners[w])do if A[1].__name==x[1].__name then if lovetoyDebug then print("EventListener already existing. Aborting")end;return end end;table.insert(j.eventListeners[w],x)else for z,A in pairs(j.eventListeners[w])do if A[1].__name==x.__name then if lovetoyDebug then print("EventListener already existing. Aborting")end;return end end;if type(y)=='function'then table.insert(j.eventListeners[w],{x,y})else if lovetoyDebug then print('Eventmanager: Second parameter has to be a function! Pls check '..x.__name)end end end end;function EventManager:removeListener(w,x)if j.eventListeners[w]then for z,A in pairs(j.eventListeners[w])do if A[1].__name==x then table.remove(j.eventListeners[w],z)return end end;if lovetoyDebug then print("Listener to be deleted is not existing.")end end end;function EventManager:fireEvent(B)if j.eventListeners[B.__name]then for m,x in pairs(j.eventListeners[B.__name])do x[2](x[1],B)end end end;ComponentAdded=class("ComponentAdded")function ComponentAdded:__init(q,k)j.entity=q;j.component=k end;ComponentRemoved=class("ComponentRemoved")function ComponentRemoved:__init(q,k)j.entity=q;j.component=k end;function table.firstElement(n)for o,p in pairs(n)do return p end end;Engine=class("Engine")function Engine:__init()j.entities={}j.rootEntity=Entity()j.singleRequirements={}j.allRequirements={}j.entityLists={}j.eventManager=EventManager()j.initializer={}j.systems={}j.systemRegistry={}j.systems["all"]={}j.systems["update"]={}j.systems["draw"]={}j.eventManager:addListener("ComponentRemoved",j,j.componentRemoved)j.eventManager:addListener("ComponentAdded",j,j.componentAdded)end;function Engine:addEntity(q)q.eventManager=j.eventManager;local C=#j.entities+1;q.id=C;j.entities[q.id]=q;if q.parent==nil then q:setParent(j.rootEntity)end;q:registerAsChild()for k,D in pairs(j.initializer)do if q:has(k)then D(q)end end;for o,k in pairs(q.components)do if not j.entityLists[k.__name]then j.entityLists[k.__name]={}end;j.entityLists[k.__name][q.id]=q;if j.singleRequirements[k.__name]then for E,F in pairs(j.singleRequirements[k.__name])do j:checkRequirements(q,F)end end end end;function Engine:removeEntity(q,G,H)for m,k in pairs(q.components)do if j.singleRequirements[k.__name]then for m,F in pairs(j.singleRequirements[k.__name])do F:removeEntity(q)end end end;for o,k in pairs(q.components)do j.entityLists[k.__name][q.id]=nil end;if j.entities[q.id]then if G then for m,I in pairs(q.children)do j:removeEntity(I,true)end else for m,I in pairs(q.children)do if H then I:setParent(H)else I:setParent(j.rootEntity)end;q:registerAsChild()end end;for o,I in pairs(q.parent.children)do q.parent.children[q.id]=nil end;j.entities[q.id].alive=false;j.entities[q.id]=nil else if lovetoyDebug then print("Trying to remove non existent entity from engine.")print("Entity id: "..q.id)print("Entity's components:")for o,k in pairs(q.components)do print(o)end end end end;function Engine:addSystem(F,J)if F.draw and F.update and not J then if lovetoyDebug then print("Lovetoys: Trying to add "..F.__name..", which has an update and a draw function, without specifying typ. Aborting")end;return end;if not j.systemRegistry[F.__name]then j:registerSystem(F)elseif not(F.update and F.draw)then if j.systemRegistry[F.__name]then if lovetoyDebug then print("Lovetoys: "..F.__name.." already exists. Aborting")end;return end end;if F.draw and not J or J=="draw"then for m,K in pairs(j.systems["draw"])do if K.__name==F.__name then if lovetoyDebug then print("Lovetoys: "..F.__name.." already exists. Aborting")end;return end end;table.insert(j.systems["draw"],F)elseif F.update and not J or J=="update"then for m,K in pairs(j.systems["update"])do if K.__name==F.__name then if lovetoyDebug then print("Lovetoys: "..F.__name.." already exists. Aborting")end;return end end;table.insert(j.systems["update"],F)end;for o,q in pairs(j.entities)do j:checkRequirements(q,F)end;return F end;function Engine:registerSystem(F)j.systemRegistry[F.__name]=F;table.insert(j.systems["all"],F)if F:requires()[1]and type(F:requires()[1])=="string"then for o,s in pairs(F:requires())do if o==1 then j.singleRequirements[s]=j.singleRequirements[s]or{}table.insert(j.singleRequirements[s],F)end;j.allRequirements[s]=j.allRequirements[s]or{}table.insert(j.allRequirements[s],F)end end;if table.firstElement(F:requires())and type(table.firstElement(F:requires()))=="table"then for o,l in pairs(F:requires())do local k=l[1]j.singleRequirements[k]=j.singleRequirements[k]or{}table.insert(j.singleRequirements[k],F)for m,s in pairs(l)do j.allRequirements[s]=j.allRequirements[s]or{}local L=false;for m,K in pairs(j.allRequirements[s])do if K==F then L=true;break end end;if not L then table.insert(j.allRequirements[s],F)end end;F.targets[o]={}end end end;function Engine:stopSystem(a)for o,F in pairs(j.systems["all"])do if a==F.__name then F.active=false end end end;function Engine:startSystem(a)for o,F in pairs(j.systems["all"])do if a==F.__name then F.active=true end end end;function Engine:toggleSystem(a)for o,F in pairs(j.systems["all"])do if a==F.__name then F.active=not F.active end end end;function Engine:update(M)for o,F in ipairs(j.systems["update"])do if F.active then F:update(M)end end end;function Engine:addInitializer(a,D)j.initializer[a]=D end;function Engine:removeInitializer(a)j.initializer[a]=nil end;function Engine:draw()for o,F in ipairs(j.systems["draw"])do if F.active then F:draw()end end end;function Engine:componentRemoved(B)local q=B.entity;local k=B.component;j.entityLists[k][q.id]=nil;if j.allRequirements[k]then for o,F in pairs(j.allRequirements[k])do F:removeEntity(q,k)end end end;function Engine:componentAdded(B)local q=B.entity;local k=B.component;if not j.entityLists[k]then j.entityLists[k]={}end;j.entityLists[k][q.id]=q;if j.allRequirements[k]then for o,F in pairs(j.allRequirements[k])do j:checkRequirements(q,F)end end;if j.initializer[B.component]then j.initializer[B.component](B.entity)end end;function Engine:getRootEntity()if j.rootEntity~=nil then return j.rootEntity end end;function Engine:getEntitiesWithComponent(k)if not j.entityLists[k]then j.entityLists[k]={}end;return j.entityLists[k]end;function Engine:checkRequirements(q,F)local N=true;local r=nil;for o,s in pairs(F:requires())do if type(s)=="string"then if not q.components[s]then N=false;break end elseif type(s)=="table"then N=true;for E,O in pairs(s)do if not q.components[O]then N=false;break end end;if N==true then r=o;F:addEntity(q,r)end end end;if N==true and r==nil then F:addEntity(q)end end
